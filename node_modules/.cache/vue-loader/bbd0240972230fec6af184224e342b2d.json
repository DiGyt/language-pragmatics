{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/src/App.vue","mtime":1614866349937},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJFeHBlcmltZW50IiwgewogICAgYXR0cnM6IHsgaWQ6ICJ0ZXN0MTIzNCIgfSwKICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoWwogICAgICB7CiAgICAgICAga2V5OiAidGl0bGUiLAogICAgICAgIGZuOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBbX2MoImRpdiIsIFtfdm0uX3YoIkludGVyYWN0aXZlRXhwZXJpbWVudCIpXSldCiAgICAgICAgfSwKICAgICAgICBwcm94eTogdHJ1ZQogICAgICB9LAogICAgICB7CiAgICAgICAga2V5OiAic2NyZWVucyIsCiAgICAgICAgZm46IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgX2MoIlNjcmVlbiIsIHsgYXR0cnM6IHsgdGl0bGU6ICJXZWxjb21lIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBXZWxjb21lIHRvIG91ciBleHBlcmltZW50LiAiKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBXZSBhcmUgc28gaGFwcHkgeW91IGpvaW5lZC4gIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBVc3VhbGx5LCBub2JvZHkgZXZlciBwbGF5cyB3aXRoIHVzLiBCdXQgbm93IHlvdSBhcmUgaGVyZS4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KCIgWWF5ISBXZSB3aWxsIGhhdmUgc28gbXVjaCBmdW4gdG9nZXRoZXIgOikpKSAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJG1hZ3BpZS5uZXh0U2NyZWVuKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJCZWdpbiB0aGUgZXhwZXJpbWVudCIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJTY3JlZW4iLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgdGl0bGU6ICJHZW5lcmFsIEluc3RydWN0aW9ucyIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBJbiB0aGlzIGV4cGVyaW1lbnQsIHlvdSB3aWxsIGJlIGFibGUgdG8gaGF2ZSBhIHJlYWwtdGltZSBkaXNjdXNzaW9uIHdpdGggYSBjaGF0IHBhcnRuZXIuIFlvdXIgZGlzY3Vzc2lvbiB3aWxsIGJlIGFib3V0IHRoZSBiZWhhdmlvciBvZiBhIHNvY2NlciBjbHViIChFeGFtcGxldG9uIEZDKSBkdXJpbmcgdGhlIGxhc3Qgc2Vhc29uLiBJbiB0aGUgdGFibGUgYmVsb3cgeW91IGNhbiBzZWUgZGVzY3JpcHRpdmUgc3RhdGlzdGljcyBvbiB0aGUgZmFpcm5lc3MgYmVoYXZpb3Igb2YgbXVsdGlwbGUgc29jY2VyIGNsdWJzIGR1cmluZyB0aGUgbGFzdCBzZWFzb24uIER1cmluZyB5b3VyIGRpc2N1c3Npb24gd2l0aCB5b3VyIGNoYXQgcGFydG5lciB5b3Ugd2lsbCBiZSBhYmxlIHRvIGluc3BlY3Qgc3VjaCBhIHRhYmxlLCBhbmQgdXNlIGl0cyBpbmZvcm1hdGlvbiBhcyBhIGJhc2lzIGZvciB5b3VyIGFyZ3VtZW50cy4gIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygiQWx0VGFibGUiLCB7IGF0dHJzOiB7IGNvbnRlbnQ6IF92bS50cmlhbC5jb250ZW50WzBdIH0gfSksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBOb3RlIHRoYXQgeW91IGNhbiBzb3J0IHRoZSB0YWJsZSBpbiBkZXNjZW5kaW5nIG9yIGFzY2VuZGluZyBvcmRlciBieSBjbGlja2luZyBvbiB0aGUgbmFtZXMgaW4gdGhlIGhlYWQgcm93LiAiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUubmV4dFNjcmVlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kbWFncGllLmFkZFJlc3VsdCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246ICJjb25kaXRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogcGFyc2VJbnQoX3ZtLiRtYWdwaWUuc29ja2V0LnZhcmlhbnQpIC0gMQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiIHRvIHRoZSBwcmFjdGljZSB0cmlhbCAiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIlNjcmVlbiIsIHsKICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIlByZXRlc3QiIH0sCiAgICAgICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogIjAiLAogICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24ocmVmKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlcyA9IHJlZi5yZXNwb25zZXMKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgX2MoIkFsdFRhYmxlIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udHJpYWwuY29udGVudFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoX3ZtLiRtYWdwaWUuc29ja2V0LmNoYWluKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIkhvdyBmYWlyIGRpZCBFeGFtcGxldG9uIEZDIHBsYXkgZHVyaW5nIHRoZSBsYXN0IHNlYXNvbj8iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoIlNsaWRlcklucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICJWZXJ5IFVuZmFpciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICJWZXJ5IEZhaXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWw6ICI1MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlcy5zbGlkZXIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidXBkYXRlOnJlc3BvbnNlIjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRzZXQocmVzcG9uc2VzLCAic2xpZGVyIiwgJGV2ZW50KQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJG1hZ3BpZS5hZGRSZXN1bHQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAicHJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IHJlc3BvbnNlcy5zbGlkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUubmV4dFNjcmVlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJDb250aW51ZSIpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiQ29ubmVjdEludGVyYWN0aXZlIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJTY3JlZW4iLAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJBbHRUYWJsZSIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBjb250ZW50OgogICAgICAgICAgICAgICAgICAgICAgX3ZtLnRyaWFsLmNvbnRlbnRbcGFyc2VJbnQoX3ZtLiRtYWdwaWUuc29ja2V0LmNoYWluKV0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgIF92bS50cmlhbC5jb25kaXRpb25zWwogICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChfdm0uJG1hZ3BpZS5zb2NrZXQudmFyaWFudCkgLSAxCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJBbHRDaGF0IiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uJG1hZ3BpZS5uZXh0U2NyZWVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnN1Ym1pdF9jaGF0KCkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk5leHQiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIlNjcmVlbiIsIHsKICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIlBvc3R0ZXN0IiB9LAogICAgICAgICAgICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6ICIwIiwKICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKHJlZikgewogICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZXMgPSByZWYucmVzcG9uc2VzCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJBbHRUYWJsZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnRyaWFsLmNvbnRlbnRbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KF92bS4kbWFncGllLnNvY2tldC5jaGFpbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICJIb3cgZmFpciBkaWQgRXhhbXBsZXRvbiBGQyBwbGF5IGR1cmluZyB0aGUgbGFzdCBzZWFzb24/IgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJTbGlkZXJJbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAiVmVyeSBVbmZhaXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAiVmVyeSBGYWlyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsOiAiNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZXMuc2xpZGVyCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInVwZGF0ZTpyZXNwb25zZSI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kc2V0KHJlc3BvbnNlcywgInNsaWRlciIsICRldmVudCkKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUuYWRkUmVzdWx0KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogInBvc3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogcmVzcG9uc2VzLnNsaWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJG1hZ3BpZS5uZXh0U2NyZWVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRpbnVlIildCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJEZWJ1Z1Jlc3VsdHMiKSwKICAgICAgICAgICAgX2MoIlNjcmVlbiIsIHsgYXR0cnM6IHsgdGl0bGU6ICJUaGFua3MhIiB9IH0sIFtfdm0uX3YoIiBHb29kYnllICIpXSkKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHByb3h5OiB0cnVlCiAgICAgIH0KICAgIF0pCiAgfSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}