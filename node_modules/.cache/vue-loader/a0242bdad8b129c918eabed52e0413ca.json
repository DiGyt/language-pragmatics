{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/Screen.vue?vue&type=style&index=0&id=8703f8b4&scoped=true&lang=css&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/Screen.vue","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5zY3JlZW4gewogIGZsZXgtZ3JvdzogMTsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0K"},{"version":3,"sources":["Screen.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;AACA;AACA;AACA","file":"Screen.vue","sourceRoot":"node_modules/magpie-base/src/components","sourcesContent":["<docs>\n### Simple screen\n\n```vue\n<Experiment>\n  <template #screens>\n    <Screen>\n      Hello World.\n    </Screen>\n  </template>\n</Experiment>\n```\n\n### Multiple slides\nOne screen may consist of multiple slides that are numbered incrementally and displayed one after another.\nYou can go to the next slide with the `nextSlide` function that is exposed by the Screen component.\n\n```vue\n<Experiment>\n  <template #screens>\n    <Screen title=\"Wow.\">\n\n      <template #0=\"{nextSlide}\">\n        Hello <button @click=\"nextSlide\">World</button>.\n      </template>\n\n      <template #1>\n        Hello you.\n      </template>\n\n    </Screen>\n\n  </template>\n</Experiment>\n```\n\n### Store responses\nThe screen component also conveniently exposes an object for you to store in the responses of the current screen, so you can later submit them using `$magpie.addResult`.\n\n```vue\n<Experiment>\n  <template #screens>\n    <Screen title=\"Wow.\">\n      <template #0=\"{nextSlide, responses}\">\n        Hello\n        <TextareaInput :response.sync=\"responses.text\" />\n        {{ responses.text }}?\n        <button v-if=\"responses.text\" @click=\"nextSlide\">Done</button>\n      </template>\n      <template #1=\"{responses}\">\n        {{ responses.text }}!\n      </template>\n    </Screen>\n  </template>\n</Experiment>\n```\n</docs>\n\n<template>\n  <div class=\"screen\">\n    <h2 v-if=\"title\">{{ title }}</h2>\n    <slot name=\"default\">\n      <!-- @slot Multi-slot with slide number as name to maintain different slides\n           @binding {function} nextSlide Jump to the next slide\n           @binding {object} responses a temporary object to store your responses before adding them to the results\n      -->\n      <slot :name=\"currentSlide\" :nextSlide=\"nextSlide\" :responses=\"responses\">\n        Slide #{{ currentSlide }} could not be found\n      </slot>\n    </slot>\n  </div>\n</template>\n\n<script>\n/**\n * This component lets you create experiment sections that appear one after the other like a slideshow.\n * Trial data\n */\nexport default {\n  name: 'Screen',\n  props: {\n    /**\n     * The title of this screen\n     */\n    title: {\n      type: String,\n      required: false,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      currentSlide: 0,\n      responses: {}\n    };\n  },\n  mounted() {\n    this.$magpie.startMouseTracking();\n    this.$magpie.$el.addEventListener('mousemove', this.onMouseMove);\n  },\n  beforeDestroy() {\n    this.$magpie.$el.removeEventListener('mousemove', this.onMouseMove);\n  },\n  methods: {\n    nextSlide(index) {\n      if (typeof index === 'number') {\n        this.currentSlide = index;\n        return;\n      }\n      this.currentSlide++;\n    },\n    onMouseMove(e) {\n      /**\n       * @property x{int} X coordinate\n       * @property y{int} Y coordinate\n       */\n      this.$emit('mousemove', { x: e.layerX, y: e.layerY });\n      this.$magpie.onMouseMove(e);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.screen {\n  flex-grow: 1;\n  position: relative;\n}\n</style>\n"]}]}