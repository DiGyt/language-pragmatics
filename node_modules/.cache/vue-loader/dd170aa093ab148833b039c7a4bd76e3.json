{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/src/components/AltChat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/src/components/AltChat.vue","mtime":1614867852928},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBWdWUgZnJvbSAndnVlJzsKY29uc3QgRVZFTlRfQ0hBVF9NRVNTQUdFID0gJ2NoYXRfbWVzc2FnZSc7CmNvbnN0IEVWRU5UX0NIQVRfQUNUSVZFID0gJ2luYWN0aXZlJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQWx0Q2hhdCcsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG1lc3NhZ2VzOiBbXSwKICAgICAgc3RhdHVzTW9uaXRvcjoge30sCiAgICAgIGFjdGl2ZTogIllvdXIgY2hhdCBwYXJ0bmVyIGhhcyBub3QgeWV0IGVudGVyZWQgdGhlIGNoYXQuIgogICAgfTsKICB9LAogIHNvY2tldDogewogICAgW0VWRU5UX0NIQVRfTUVTU0FHRV0ocGF5bG9hZCkgewogICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gocGF5bG9hZCk7CiAgICAgIFZ1ZS5uZXh0VGljaygoKSA9PiB7CiAgICAgICAgdGhpcy4kcmVmcy5ib3guc2Nyb2xsVG9wID0gdGhpcy4kcmVmcy5ib3guc2Nyb2xsSGVpZ2h0OwogICAgICB9KTsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOm1lc3NhZ2VzJywgdGhpcy5tZXNzYWdlcyk7CiAgICB9LAogICAgW0VWRU5UX0NIQVRfQUNUSVZFXShwYXlsb2FkKSB7CiAgICAgIHRoaXMuc3RhdHVzTW9uaXRvcltwYXlsb2FkLnBhcnRpY2lwYW50SWRdID0gcGF5bG9hZDsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnN0YXR1c01vbml0b3InLCB0aGlzLnN0YXR1c01vbml0b3IpOwogICAgfQogIH0sCiAgRVZFTlRfQ0hBVF9NRVNTQUdFLAogIEVWRU5UX0NIQVRfQUNUSVZFLAogIGNyZWF0ZWQgKCkgewogICAgdGhpcy5tb25pdG9yQWN0aXZpdHkoKQogIH0sCiAgZGVhY3RpdmF0ZWQoKSB7CiAgICBjbGVhckludGVydmFsKHRoaXMudXBkYXRlKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHNlbmQoKSB7CiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLiRyZWZzLnRleHQudmFsdWU7CiAgICAgIGlmICghbWVzc2FnZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLiRtYWdwaWUuc29ja2V0LmJyb2FkY2FzdChFVkVOVF9DSEFUX01FU1NBR0UsIHsKICAgICAgICBtZXNzYWdlLAogICAgICAgIHBhcnRpY2lwYW50SWQ6IHRoaXMuJG1hZ3BpZS5zb2NrZXQucGFydGljaXBhbnRJZAogICAgICB9KTsKICAgICAgdGhpcy4kcmVmcy50ZXh0LnZhbHVlID0gJyc7CiAgICAgIHRoaXMuJHJlZnMudGV4dC5mb2N1cygpOwogICAgfSwKICAgIG1vbml0b3JBY3Rpdml0eSgpewogICAgICB0aGlzLnVwZGF0ZSA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAvLyBzZXQgeW91cnNlbGYgYWN0aXZlCiAgICAgICAgdGhpcy4kbWFncGllLnNvY2tldC5icm9hZGNhc3QoRVZFTlRfQ0hBVF9BQ1RJVkUsIHsKICAgICAgICAgIHN0YXR1czogImFjdGl2ZSIsCiAgICAgICAgICBwYXJ0aWNpcGFudElkOiB0aGlzLiRtYWdwaWUuc29ja2V0LnBhcnRpY2lwYW50SWQsCiAgICAgICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKQogICAgICAgIH0pOwogICAgICAgIC8vIGNoZWNrIGlmIHBhcnRuZXIgaXMgYWN0aXZlCiAgICAgICAgZm9yIChsZXQgW3BhcnRpY2lwYW50SUQsIHN0YXR1c10gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0dXNNb25pdG9yKSkgewogICAgICAgICAgY29uc29sZS5sb2codGhpcy5zdGF0dXNNb25pdG9yKQogICAgICAgICAgaWYgKHBhcnRpY2lwYW50SUQgIT0gdGhpcy4kbWFncGllLnNvY2tldC5wYXJ0aWNpcGFudElkKSB7CiAgICAgICAgICAgIGlmIChzdGF0dXMuc3RhdHVzID09PSAiYWN0aXZlIikgewogICAgICAgICAgICAgIGlmICgobmV3IERhdGUoKSAtIG5ldyBEYXRlKHN0YXR1cy5sYXN0VXBkYXRlZCkpID4gMTUgKiAxMDAwKSB7CiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHJlc3BvbnNlIGFmdGVyIDMwIHNlY29uZHMsIHBhcnRuZXIgaGFzIGxlZnQgdGhlIGNoYXQKICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gIllvdXIgY2hhdCBwYXJ0bmVyIGhhcyBsZWZ0IHRoZSBjaGF0LiBQbGVhc2UgY2xpY2sgW2xlYXZlIGNoYXRdIHRvIGZpbmlzaCB0aGUgZXhwZXJpbWVudC4iOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSA9ICJZb3VyIGNoYXQgcGFydG5lciBpcyBhY3RpdmUiOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgY29uc29sZS5sb2codGhpcy5hY3RpdmUpOwogICAgICAgIH0KICAgICAgfSwgMzAwMCkKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["AltChat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AltChat.vue","sourceRoot":"src/components","sourcesContent":["\n<template>\n  <div class=\"AltChat\">\n    <div id=\"chatbox_1\" ref=\"box\" class=\"chat-box\">\n      <p id=\"prg\"\n          v-for=\"(message, i) in messages\"\n          :key=\"i\"\n          :class=\"{\n          message: true,\n          me: message.participantId === $magpie.socket.participantId\n        }\"\n          v-text=\"message.message\"\n      ></p>\n    </div>\n    <div class=\"notice-box\">{{active}}</div>\n    <div class=\"chat-input\">\n      <textarea\n          ref=\"text\"\n          cols=\"50\"\n          placeholder=\"Type your message to the other participant here.\"\n          @keydown.enter=\"send\"\n      ></textarea>\n      <button @click.stop=\"send()\" @v>\n        Send\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue';\nconst EVENT_CHAT_MESSAGE = 'chat_message';\nconst EVENT_CHAT_ACTIVE = 'inactive';\n\nexport default {\n  name: 'AltChat',\n  data() {\n    return {\n      messages: [],\n      statusMonitor: {},\n      active: \"Your chat partner has not yet entered the chat.\"\n    };\n  },\n  socket: {\n    [EVENT_CHAT_MESSAGE](payload) {\n      this.messages.push(payload);\n      Vue.nextTick(() => {\n        this.$refs.box.scrollTop = this.$refs.box.scrollHeight;\n      });\n      this.$emit('update:messages', this.messages);\n    },\n    [EVENT_CHAT_ACTIVE](payload) {\n      this.statusMonitor[payload.participantId] = payload;\n      this.$emit('update:statusMonitor', this.statusMonitor);\n    }\n  },\n  EVENT_CHAT_MESSAGE,\n  EVENT_CHAT_ACTIVE,\n  created () {\n    this.monitorActivity()\n  },\n  deactivated() {\n    clearInterval(this.update);\n  },\n  methods: {\n    send() {\n      const message = this.$refs.text.value;\n      if (!message) {\n        return;\n      }\n      this.$magpie.socket.broadcast(EVENT_CHAT_MESSAGE, {\n        message,\n        participantId: this.$magpie.socket.participantId\n      });\n      this.$refs.text.value = '';\n      this.$refs.text.focus();\n    },\n    monitorActivity(){\n      this.update = setInterval(() => {\n        // set yourself active\n        this.$magpie.socket.broadcast(EVENT_CHAT_ACTIVE, {\n          status: \"active\",\n          participantId: this.$magpie.socket.participantId,\n          lastUpdated: new Date()\n        });\n        // check if partner is active\n        for (let [participantID, status] of Object.entries(this.statusMonitor)) {\n          console.log(this.statusMonitor)\n          if (participantID != this.$magpie.socket.participantId) {\n            if (status.status === \"active\") {\n              if ((new Date() - new Date(status.lastUpdated)) > 15 * 1000) {\n                // If there's no response after 30 seconds, partner has left the chat\n                this.active = \"Your chat partner has left the chat. Please click [leave chat] to finish the experiment.\";\n              } else {\n                this.active = \"Your chat partner is active\";\n              }\n            }\n          }\n          console.log(this.active);\n        }\n      }, 3000)\n    }\n  }\n};\n</script>\n\n\n<style>\n.chat {\n  width: 450px;\n}\n\n.chat-box {\n  overflow: auto;\n  height: 400px;\n}\n\n.message {\n  width: 55%;\n  float: left;\n  text-align: left;\n  background: #5187ba7a;\n  border-radius: 4px;\n  padding: 4px;\n  margin: 5px 0;\n}\n\n.message.me {\n  float: right;\n  background: #70ba517a;\n}\n\n.chat-input {\n  display: flex;\n}\n\n.chat-input textarea {\n  flex-grow: 1;\n  height: 32px;\n}\n\n.chat-input button {\n  margin: 0;\n}\n\n.notice-box:hover { background-color: #ff9c00; }\n.notice-box {\n  background-color: #e8a235;\n  border-radius: 4px;\n  color: #fefefb;\n  font-weight:bold;\n  text-transform:uppercase;\n  letter-spacing: 1px;\n}\n\n</style>\n"]}]}