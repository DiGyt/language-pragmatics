{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/inputs/ForcedChoiceInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/inputs/ForcedChoiceInput.vue","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qKgogKiBIYXZlIHRoZSBwYXJ0aWNpcGFudCBjaG9vc2UgYmV0d2VlbiBtdWx0aXBsZSBvcHRpb25zLgogKi8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdGb3JjZWRDaG9pY2VJbnB1dCcsCiAgcHJvcHM6IHsKICAgIC8qKgogICAgICogVGhlIHBvc3NpYmxlIG9wdGlvbnMgdG8gY2hvb3NlIGZyb20KICAgICAqLwogICAgb3B0aW9uczogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIG9uT3B0aW9uQ2xpY2sob3B0aW9uKSB7CiAgICAgIC8qKgogICAgICAgKiBDaGFuZ2UgZXZlbnQgd2l0aCB0aGUgY2hvc2VuIG9wdGlvbi4gVXNlZnVsIGluIGNvbWJpbmF0aW9uIHdpdGggYHJlc3BvbnNlLnN5bmNgCiAgICAgICAqLwogICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6cmVzcG9uc2UnLCBvcHRpb24pOwogICAgfQogIH0KfTsK"},{"version":3,"sources":["ForcedChoiceInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ForcedChoiceInput.vue","sourceRoot":"node_modules/magpie-base/src/components/inputs","sourcesContent":["<docs>\n\n```vue\n<Experiment>\n  <template #screens>\n    <Screen>\n      <template #0=\"{responses}\">\n        <p>What's on the bread?</p>\n        <ForcedChoiceInput\n            :response.sync=\"responses.bread\"\n            :options=\"['Ham', 'Jam']\" />\n          <p v-if=\"responses.bread === 'Jam'\">A sweet tooth, eh!?</p>\n      </template>\n    </Screen>\n  </template>\n</Experiment>\n```\n\n</docs>\n\n<template>\n  <div class=\"forced_choice\">\n    <div class=\"options\">\n      <div\n        v-for=\"option in options\"\n        :key=\"option\"\n        class=\"option\"\n        @click=\"onOptionClick(option)\"\n      >\n        {{ option }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n/**\n * Have the participant choose between multiple options.\n */\nexport default {\n  name: 'ForcedChoiceInput',\n  props: {\n    /**\n     * The possible options to choose from\n     */\n    options: {\n      type: Array,\n      required: true\n    }\n  },\n  methods: {\n    onOptionClick(option) {\n      /**\n       * Change event with the chosen option. Useful in combination with `response.sync`\n       */\n      this.$emit('update:response', option);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.option {\n  background-color: #5187ba;\n  border: none;\n  border-radius: 2px;\n  color: white;\n  cursor: pointer;\n  display: inline-block;\n  font-family: 'Lato', 'Noto Sans', sans-serif;\n  font-size: 12px;\n  line-height: 20px;\n  font-weight: 700;\n  letter-spacing: 0.9px;\n  margin: 0 5px 20px 5px;\n  outline: none;\n  padding: 5px 10px;\n  text-transform: uppercase;\n}\n\n.option:hover {\n  background-color: #324d93;\n}\n</style>\n"]}]}