{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/screens/SelfPacedReading.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/screens/SelfPacedReading.vue","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vU2NyZWVuJzsKaW1wb3J0IEtleXByZXNzSW5wdXQgZnJvbSAnLi4vaW5wdXRzL0tleXByZXNzSW5wdXQnOwppbXBvcnQgV2FpdCBmcm9tICcuLi9oZWxwZXJzL1dhaXQnOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdTZWxmUGFjZWRSZWFkaW5nJywKICBjb21wb25lbnRzOiB7IEtleXByZXNzSW5wdXQsIFNjcmVlbiwgV2FpdCB9LAogIHByb3BzOiB7CiAgICAvKioKICAgICAqIFRpdGxlIG9mIHRoZSBzY3JlZW4KICAgICAqLwogICAgdGl0bGU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJwogICAgfSwKICAgIC8qKgogICAgICogU2VsZi1wYWNlZCByZWFkaW5nIHRleHQKICAgICAqLwogICAgdGV4dDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgLyoqCiAgICAgKiBHaXZlIGluc3RydWN0aW9ucyBvbiB3aGF0IHRoZSBwYXJ0aWNpcGFudCBpcyBzdXBwb3NlZCB0byBkbwogICAgICovCiAgICBpbnN0cnVjdGlvbnM6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnUHJlc3MgU1BBQ0UgdG8gcmV2ZWFsIHRoZSB3b3Jkcy4nCiAgICB9LAogICAgLyoqCiAgICAgKiBUaGUga2V5IHRvIHByZXNzIHRvIHJldmVhbCB0aGUgbmV4dCB3b3JkCiAgICAgKi8KICAgIHRyaWdnZXI6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnICcKICAgIH0sCiAgICAvKioKICAgICAqIFVuZGVybGluZSB0eXBlCiAgICAgKgogICAgICogQHZhbHVlcyB3b3Jkcywgc2VudGVuY2Ugb3Igbm9uZQogICAgICovCiAgICB1bmRlcmxpbmU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnbm9uZScKICAgIH0sCiAgICAvKioKICAgICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgbmV4dCB3b3JkIGF0IHRoZSBzYW1lIHBvc2l0aW9uIG9yIGF0IHRoZSBuZXh0CiAgICAgKgogICAgICogQHZhbHVlcyBzYW1lIG9yIG5leHQKICAgICAqLwogICAgd29yZFBvczogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdzYW1lJwogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHdvcmQ6IC0xLAogICAgICByZXNwb25zZVRpbWVzOiBbXSwKICAgICAgc3RhcnRUaW1lOiBudWxsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHNwbGl0dGVycygpIHsKICAgICAgcmV0dXJuIHRoaXMudGV4dC5zcGxpdCgnfCcpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgbmV4dFdvcmQoKSB7CiAgICAgIGlmICh0aGlzLndvcmQgPiAtMSkgewogICAgICAgIHRoaXMucmVzcG9uc2VUaW1lcy5wdXNoKERhdGUubm93KCkgLSB0aGlzLnN0YXJ0VGltZSk7CiAgICAgIH0KICAgICAgdGhpcy53b3JkKys7CiAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTsKICAgICAgaWYgKHRoaXMud29yZCA9PT0gdGhpcy5zcGxpdHRlcnMubGVuZ3RoKSB7CiAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlOnJlc3BvbnNlLXRpbWVzJywgdGhpcy5yZXNwb25zZVRpbWVzKTsKICAgICAgfQogICAgfQogIH0KfTsK"},{"version":3,"sources":["SelfPacedReading.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SelfPacedReading.vue","sourceRoot":"node_modules/magpie-base/src/components/screens","sourcesContent":["<docs>\n\n```vue\n<Experiment>\n  <template #screens>\n    <SelfPacedReading text=\"This|is|a|nice|text.\" word-pos=\"next\" underline=\"sentence\" @change:response-times=\"responseTimes = $event\">\n      <template #task>\n        <RatingInput question=\"Is it?\" left=\"No\" right=\"Yes\" @update:response=\"$magpie.addResult({\n          rating: $event,\n          responseTimes,\n        })\" />\n      </template>\n    </SelfPacedReading>\n    <DebugResults />\n  </template>\n</Experiment>\n```\n\n</docs>\n\n<template>\n  <Screen :title=\"title\">\n    <template #0=\"{ nextSlide }\">\n      <!-- @slot provide a preparation stimulus, i.e. a text or an audio explanation-->\n      <slot name=\"prep\" :done=\"nextSlide\">\n        <Wait :time=\"1\" @done=\"nextSlide\" />\n      </slot>\n    </template>\n\n    <template #1=\"{ nextSlide }\">\n      <Wait :time=\"500\" @done=\"nextSlide\" />\n    </template>\n\n    <template #2=\"{ nextSlide }\">\n      <!-- @slot optional stimulus content -->\n      <slot name=\"stimulus\"></slot>\n      <KeypressInput\n        :keys=\"{ [trigger]: instructions }\"\n        @update:response=\"nextWord\"\n      />\n      <div\n        :class=\"{\n          text: true,\n          'underline-words': underline === 'words',\n          'underline-sentence': underline === 'sentence',\n          'show-all': wordPos === 'next'\n        }\"\n      >\n        <span\n          v-for=\"(splitter, i) in splitters\"\n          :key=\"i\"\n          :class=\"{ current: i === word }\"\n          v-text=\"splitter\"\n        ></span>\n      </div>\n      <!-- @slot task content, displayed after the whole text was read -->\n      <slot v-if=\"word >= splitters.length\" name=\"task\">\n        <Wait :time=\"100\" @done=\"$magpie.nextScreen()\" />\n      </slot>\n    </template>\n  </Screen>\n</template>\n\n<script>\nimport Screen from '../Screen';\nimport KeypressInput from '../inputs/KeypressInput';\nimport Wait from '../helpers/Wait';\n\nexport default {\n  name: 'SelfPacedReading',\n  components: { KeypressInput, Screen, Wait },\n  props: {\n    /**\n     * Title of the screen\n     */\n    title: {\n      type: String,\n      default: ''\n    },\n    /**\n     * Self-paced reading text\n     */\n    text: {\n      type: String,\n      required: true\n    },\n    /**\n     * Give instructions on what the participant is supposed to do\n     */\n    instructions: {\n      type: String,\n      default: 'Press SPACE to reveal the words.'\n    },\n    /**\n     * The key to press to reveal the next word\n     */\n    trigger: {\n      type: String,\n      default: ' '\n    },\n    /**\n     * Underline type\n     *\n     * @values words, sentence or none\n     */\n    underline: {\n      type: String,\n      default: 'none'\n    },\n    /**\n     * Whether to show the next word at the same position or at the next\n     *\n     * @values same or next\n     */\n    wordPos: {\n      type: String,\n      default: 'same'\n    }\n  },\n  data() {\n    return {\n      word: -1,\n      responseTimes: [],\n      startTime: null\n    };\n  },\n  computed: {\n    splitters() {\n      return this.text.split('|');\n    }\n  },\n  methods: {\n    nextWord() {\n      if (this.word > -1) {\n        this.responseTimes.push(Date.now() - this.startTime);\n      }\n      this.word++;\n      this.startTime = Date.now();\n      if (this.word === this.splitters.length) {\n        this.$emit('change:response-times', this.responseTimes);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.text {\n  margin: 30px auto;\n}\n\n.text * {\n  margin-right: 5px;\n}\n\n.text.underline-sentence * {\n  margin-right: 0;\n  padding-right: 5px;\n  border-bottom: 1px solid black;\n}\n\n.text.underline-words * {\n  border-bottom: 1px solid black;\n}\n\n.text :not(.current) {\n  display: none;\n}\n\n.text.show-all :not(.current) {\n  color: transparent;\n  display: inline;\n}\n\n.text .current {\n  color: black;\n  display: inline;\n}\n</style>\n"]}]}