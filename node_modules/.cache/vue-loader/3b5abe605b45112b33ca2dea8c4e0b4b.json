{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/screens/DebugResults.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/screens/DebugResults.vue","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vU2NyZWVuJzsKaW1wb3J0IHN0cmluZ2lmeSBmcm9tICdjc3Ytc3RyaW5naWZ5L2xpYi9zeW5jJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRGVidWdSZXN1bHRzJywKICBjb21wb25lbnRzOiB7IFNjcmVlbiB9LAogIHByb3BzOiB7fSwKICBkYXRhKCkgewogICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuJG1hZ3BpZS5nZXRSZXN1bHRzKCk7CiAgICByZXR1cm4gewogICAgICByZXN1bHRzLAogICAgICBjc3Y6IHN0cmluZ2lmeShyZXN1bHRzLCB7CiAgICAgICAgY29sdW1uczogT2JqZWN0LmtleXMocmVzdWx0c1swXSksCiAgICAgICAgaGVhZGVyOiB0cnVlCiAgICAgIH0pCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZG93bmxvYWRDc3YoKSB7CiAgICAgIGxldCBibG9iID0gbmV3IEJsb2IoW3RoaXMuY3N2XSwgewogICAgICAgIHR5cGU6ICd0ZXh0L3BsYWluJywKICAgICAgICBlbmRpbmdzOiAnbmF0aXZlJwogICAgICB9KTsKICAgICAgdGhpcy5kb3dubG9hZCgKICAgICAgICAnbWFncGllLScgKwogICAgICAgICAgdGhpcy4kbWFncGllLmlkICsKICAgICAgICAgICctJyArCiAgICAgICAgICBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApICsKICAgICAgICAgICcuY3N2JywKICAgICAgICBibG9iCiAgICAgICk7CiAgICB9LAoKICAgIGRvd25sb2FkKGZpbGVuYW1lLCBibG9iKSB7CiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CgogICAgICBsZXQgb2JqZWN0VXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBvYmplY3RVcmwpOwogICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBmaWxlbmFtZSk7CgogICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CgogICAgICBlbGVtZW50LmNsaWNrKCk7CgogICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVybCk7CiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["DebugResults.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","file":"DebugResults.vue","sourceRoot":"node_modules/magpie-base/src/components/screens","sourcesContent":["<docs>\nThis will display all data that has been entered into the experiment up to this point in a table.\nThis is useful for debugging.\nOnce you are gaoing live with your experiment, you can use the SubmitResults screen instead of this one to submit the data to the server and say thank you to the user.\n</docs>\n\n<template>\n  <Screen title=\"Results\">\n    <template #0>\n      <button @click=\"downloadCsv\">Download all data as csv</button>\n      <table>\n        <thead>\n          <tr>\n            <th v-for=\"key in Object.keys(results[0])\" :key=\"key\">{{ key }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(row, i) in results\" :key=\"i\">\n            <td v-for=\"(key, j) in Object.keys(results[0])\" :key=\"j\">\n              {{ String(row[key]) }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </template>\n  </Screen>\n</template>\n\n<script>\nimport Screen from '../Screen';\nimport stringify from 'csv-stringify/lib/sync';\n\nexport default {\n  name: 'DebugResults',\n  components: { Screen },\n  props: {},\n  data() {\n    const results = this.$magpie.getResults();\n    return {\n      results,\n      csv: stringify(results, {\n        columns: Object.keys(results[0]),\n        header: true\n      })\n    };\n  },\n  methods: {\n    downloadCsv() {\n      let blob = new Blob([this.csv], {\n        type: 'text/plain',\n        endings: 'native'\n      });\n      this.download(\n        'magpie-' +\n          this.$magpie.id +\n          '-' +\n          new Date().toISOString().slice(0, 10) +\n          '.csv',\n        blob\n      );\n    },\n\n    download(filename, blob) {\n      const element = document.createElement('a');\n\n      let objectUrl = URL.createObjectURL(blob);\n      element.setAttribute('href', objectUrl);\n      element.setAttribute('download', filename);\n\n      element.style.display = 'none';\n      document.body.appendChild(element);\n\n      element.click();\n\n      URL.revokeObjectURL(objectUrl);\n      document.body.removeChild(element);\n    }\n  }\n};\n</script>\n<style scoped>\ntd {\n  max-width: 150px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>\n"]}]}