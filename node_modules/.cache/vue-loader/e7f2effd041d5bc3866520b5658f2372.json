{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/inputs/CompletionInput.vue?vue&type=style&index=0&id=e4c617fc&scoped=true&lang=css&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/inputs/CompletionInput.vue","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKdGV4dGFyZWEgewogIGJvcmRlcjogMnB4IHNvbGlkICM1MTg3YmE7CiAgYm9yZGVyLXJhZGl1czogMTBweDsKICBkaXNwbGF5OiBibG9jazsKICBmb250LXNpemU6IDE2cHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgb3V0bGluZTogbm9uZTsKICBwYWRkaW5nOiAxMHB4IDIwcHg7Cn0K"},{"version":3,"sources":["CompletionInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CompletionInput.vue","sourceRoot":"node_modules/magpie-base/src/components/inputs","sourcesContent":["<docs>\n\n```vue\n<Experiment>\n  <template #screens>\n    <Screen>\n      <template #0=\"{responses}\">\n        <CompletionInput\n          text=\"One %s fell over three %s.\"\n          :responses.sync=\"responses.words\"\n          :options=\"[\n              ['horse', 'penguin', 'bird'],\n              ['icicles', 'trees', 'bushes']\n              ]\"\n          />\n        <p v-if=\"responses.words[0] === 'horse'\">A horse would never fall over {{responses.words[1]}}</p>\n      </template>\n    </Screen>\n  </template>\n</Experiment>\n```\n</docs>\n<template>\n  <div class=\"completion\">\n    <div class=\"question\">\n      <span v-for=\"(slice, i) in slices\" :key=\"i\"\n        >{{ slice }}\n        <select\n          v-if=\"i !== slices.length - 1\"\n          v-model=\"answers[i]\"\n          @change=\"\n            /**\n             * Change event with the fully completed text. Useful for response.sync\n             */\n            $emit('update:response', fullAnswer);\n            /**\n             * Change event as an array of completions. Useful for responses.sync\n             */\n            $emit('update:responses', answers);\n          \"\n          ><option\n            v-for=\"option in options[i]\"\n            :key=\"option\"\n            v-text=\"option\"\n          ></option></select\n      ></span>\n    </div>\n  </div>\n</template>\n\n<script>\n/**\n * Have the participant complete a text with various gaps.\n */\nexport default {\n  name: 'CompletionInput',\n  props: {\n    /**\n     * The text that is supposed to be completed. `%s` marks completions\n     */\n    text: {\n      type: String,\n      required: true\n    },\n    /**\n     * An array of arrays with possible completions per `%s`\n     */\n    options: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      answers: []\n    };\n  },\n  computed: {\n    slices() {\n      return this.text.split('%s');\n    },\n    fullAnswer() {\n      const answers = this.answers.slice();\n      return this.text\n        .split('%s')\n        .map((s) => s + (answers.shift() || ''))\n        .join('');\n    }\n  }\n};\n</script>\n\n<style scoped>\ntextarea {\n  border: 2px solid #5187ba;\n  border-radius: 10px;\n  display: block;\n  font-size: 16px;\n  margin: 0 auto;\n  outline: none;\n  padding: 10px 20px;\n}\n</style>\n"]}]}