{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/inputs/KeypressInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/magpie-base/src/components/inputs/KeypressInput.vue","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qKgogKiBIYXZlIHlvdXIgcGFydGljaXBhbnRzIHJlYWN0CiAqLwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0tleXByZXNzSW5wdXQnLAogIHByb3BzOiB7CiAgICAvKioKICAgICAqIEFuIG9iamVjdCB3aXRoIGtleXMgbWFwcGVkIHRvIG9wdGlvbiBsYWJlbHMKICAgICAqLwogICAga2V5czogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bik7CiAgfSwKICBkZXN0cm95ZWQoKSB7CiAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlEb3duKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIG9uS2V5RG93bihlKSB7CiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHRoaXMua2V5c1tlLmtleV0pIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnJlc3BvbnNlJywgdGhpcy5rZXlzW2Uua2V5XSk7CiAgICAgIH0KICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["KeypressInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"KeypressInput.vue","sourceRoot":"node_modules/magpie-base/src/components/inputs","sourcesContent":["<docs>\n```vue\n<Experiment>\n  <template #screens>\n    <Screen>\n      <template #0=\"{responses}\">\n        <p>Fries or soup?</p>\n        <KeypressInput\n            :response.sync=\"responses.lunch\"\n            :keys=\"{\n              f: 'fries',\n              j: 'soup'\n            }\" />\n          <p v-if=\"responses.lunch === 'fries'\">Don't forget the ketchup!</p>\n      </template>\n    </Screen>\n  </template>\n</Experiment>\n```\n</docs>\n\n<template>\n  <div class=\"keypress\">\n    <div class=\"options\">\n      <span v-for=\"(option, key) in keys\" :key=\"key\"\n        ><strong v-text=\"key\"></strong> = {{ option }}\n      </span>\n    </div>\n  </div>\n</template>\n\n<script>\n/**\n * Have your participants react\n */\nexport default {\n  name: 'KeypressInput',\n  props: {\n    /**\n     * An object with keys mapped to option labels\n     */\n    keys: {\n      type: Object,\n      required: true\n    }\n  },\n  mounted() {\n    window.document.addEventListener('keydown', this.onKeyDown);\n  },\n  destroyed() {\n    window.document.removeEventListener('keydown', this.onKeyDown);\n  },\n  methods: {\n    onKeyDown(e) {\n      if ('undefined' !== typeof this.keys[e.key]) {\n        e.preventDefault();\n        this.$emit('update:response', this.keys[e.key]);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped></style>\n"]}]}