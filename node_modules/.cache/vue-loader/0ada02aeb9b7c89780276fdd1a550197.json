{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/src/components/AltTable.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/src/components/AltTable.vue","mtime":1614864508934},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50YWJsZSB7CiAgbWFyZ2luLWxlZnQ6IGF1dG87CiAgbWFyZ2luLXJpZ2h0OiBhdXRvOwogIGZvbnQtc2l6ZTogc21hbGw7CiAgYm9yZGVyLXNwYWNpbmc6IDAgMHB4OwogIC8vYm9yZGVyLWNvbGxhcHNlOiBzZXBhcmF0ZTsKICBib3JkZXItcmFkaXVzOiA0MHB4Owp9Cgp0aCB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzUxODdiYTsKICBjb2xvcjogd2hpdGU7CiAgYm9yZGVyLXJhZGl1czogNDBweDsKfQoKdGgsCnRkIHsKICAvL3dpZHRoOiAxNTBweDsKICAvL3RleHQtYWxpZ246IGNlbnRlcjsKICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsKICAvL3BhZGRpbmc6IDBweDsKICBtYXJnaW4tYm90dG9tOiAwOwogIC8vZGlzcGxheTogYmxvY2s7Cn0KCgo="},{"version":3,"sources":["AltTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AltTable.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <table class=\"table\" id=\"myTable\" v-if=\"content\">\n    <tr>\n      <th v-for=\"(name, idx) in content.head\" @click=\"sortTable(idx)\">\n        {{ name }}\n      </th>\n    </tr>\n    <tr v-for=\"roww in content.data\">\n      <td v-for=\"cell in roww\">\n        {{ cell }}\n      </td>\n    </tr>\n  </table>\n</template>\n\n\n<script>\nimport Vue from 'vue';\n\n\nexport default {\n  name: 'AltTable',\n  props: ['content'],\n  methods: {\n    sortTable(n) {\n      // A function to vertically sort a table (ascending or descending) via clicking\n      // If row data can be numbers, it's sorted numerically, else alphabetically\n      // based on https://www.w3schools.com/howto/howto_js_sort_table.asp\n\n      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\n      table = document.getElementById(\"myTable\");\n      switching = true;\n      //Set the sorting direction to ascending:\n      dir = \"asc\";\n      /*Make a loop that will continue until\n      no switching has been done:*/\n      while (switching) {\n        //start by saying: no switching is done:\n        switching = false;\n        rows = table.rows;\n        /*Loop through all table rows (except the\n        first, which contains table headers):*/\n        for (i = 1; i < (rows.length - 1); i++) {\n          //start by saying there should be no switching:\n          shouldSwitch = false;\n          /*Get the two elements you want to compare,\n          one from current row and one from the next:*/\n          x = rows[i].getElementsByTagName(\"TD\")[n].innerHTML.toLowerCase();\n          y = rows[i + 1].getElementsByTagName(\"TD\")[n].innerHTML.toLowerCase();\n          // convert to numbers if possible\n          var xArg = (isNaN(x)) ?  x : parseInt(x);\n          var yArg = (isNaN(y)) ?  y : parseInt(y);\n          /*check if the two rows should switch place,\n          based on the direction, asc or desc:*/\n          if (dir == \"asc\") {\n            if (xArg > yArg) {\n              //if so, mark as a switch and break the loop:\n              shouldSwitch= true;\n              break;\n            }\n          } else if (dir == \"desc\") {\n            if (xArg < yArg) {\n              //if so, mark as a switch and break the loop:\n              shouldSwitch = true;\n              break;\n            }\n          }\n        }\n        if (shouldSwitch) {\n          /*If a switch has been marked, make the switch\n          and mark that a switch has been done:*/\n          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n          switching = true;\n          //Each time a switch is done, increase this count by 1:\n          switchcount ++;\n        } else {\n          /*If no switching has been done AND the direction is \"asc\",\n          set the direction to \"desc\" and run the while loop again.*/\n          if (switchcount == 0 && dir == \"asc\") {\n            dir = \"desc\";\n            switching = true;\n          }\n        }\n      }\n    }\n  }\n\n};\n\n</script>\n<style>\n.table {\n  margin-left: auto;\n  margin-right: auto;\n  font-size: small;\n  border-spacing: 0 0px;\n  //border-collapse: separate;\n  border-radius: 40px;\n}\n\nth {\n  background-color: #5187ba;\n  color: white;\n  border-radius: 40px;\n}\n\nth,\ntd {\n  //width: 150px;\n  //text-align: center;\n  border: 1px solid black;\n  //padding: 0px;\n  margin-bottom: 0;\n  //display: block;\n}\n\n\n</style>\n"]}]}