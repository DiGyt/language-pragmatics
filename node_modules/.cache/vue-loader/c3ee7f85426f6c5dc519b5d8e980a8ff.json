{"remainingRequest":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/src/App.vue","mtime":1614868567530},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dirk/WebstormProjects/chat_experiment/language-pragmatics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIExvYWQgZGF0YSBmcm9tIGNzdiBmaWxlcyBhcyBqYXZhc2NyaXB0IGFycmF5cyB3aXRoIG9iamVjdHMKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKCmltcG9ydCBBbHRDaGF0IGZyb20gJy4uL3NyYy9jb21wb25lbnRzL0FsdENoYXQudnVlJzsKaW1wb3J0IEFsdFRhYmxlIGZyb20gJy4uL3NyYy9jb21wb25lbnRzL0FsdFRhYmxlLnZ1ZSc7CmltcG9ydCBWdWUgZnJvbSAidnVlIjsKCgovLyBnZXQgb3VyIG93biByYW5kb20gZ2VuZXJhdG9ycwoKY29uc3QgU0VFRCA9IDIzMTExOTk1OwoKCmZ1bmN0aW9uIFJhbmRvbUludChzZWVkKSB7CiAgdGhpcy5fc2VlZCA9IHNlZWQgJSAyMTQ3NDgzNjQ3OwogIGlmICh0aGlzLl9zZWVkIDw9IDApIHRoaXMuX3NlZWQgKz0gMjE0NzQ4MzY0NjsKfQoKUmFuZG9tSW50LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkgewogIHRoaXMuX3NlZWQgPSAodGhpcy5fc2VlZCAqIDE2ODA3KSAmIDB4ZmZmZmZmZmY7CiAgcmV0dXJuICh0aGlzLl9zZWVkIC0gMSkgfCAwOwp9OwoKUmFuZG9tSW50LnByb3RvdHlwZS5uZXh0RmxvYXQgPSBmdW5jdGlvbiAoKSB7CiAgLy8gV2Uga25vdyB0aGF0IHJlc3VsdCBvZiBuZXh0KCkgd2lsbCBiZSAxIHRvIDIxNDc0ODM2NDYgKGluY2x1c2l2ZSkuCiAgcmV0dXJuIE1hdGguYWJzKCh0aGlzLm5leHQoKSAtIDEpIC8gMjE0NzQ4MzY0Nik7Cn07Cgp2YXIgcm5nID0gbmV3IFJhbmRvbUludChTRUVEKTsKCi8vIGdlbmVyYXRlIHRoZSBkYXRhCgpmdW5jdGlvbiBnZW5lcmF0ZURhdGEoaGVhZCwgcm93cywgdm1pbiwgdm1heCkgewogIHZtaW4gPSAodHlwZW9mIHZtaW4gIT09ICd1bmRlZmluZWQnKSA/ICB2bWluIDogMDsKICB2bWF4ID0gKHR5cGVvZiB2bWF4ICE9PSAndW5kZWZpbmVkJykgPyAgdm1heCA6IDIwOwogIHZhciBkYXRhID0gW107CiAgZm9yICh2YXIgaT0wOyBpIDwgcm93cy5sZW5ndGg7IGkgKyspewogICAgZGF0YS5wdXNoKFtdKTsKICAgIGRhdGFbaV1bMF0gPSByb3dzW2ldOwogICAgZm9yICh2YXIgaj0xOyBqIDwgaGVhZC5sZW5ndGg7IGogKyspewogICAgICBkYXRhW2ldW2pdID0gTWF0aC5mbG9vcihybmcubmV4dEZsb2F0KCkgKiB2bWF4KSArIHZtaW47CiAgICB9CiAgfQogIHJldHVybiB7aGVhZDpoZWFkLCBkYXRhOmRhdGF9Cn0KCnZhciBIRUFEUyA9IFsiTmFtZSIsICJGb3VscyBjYXVzZWQiLCAiRm91bHMgcmVjZWl2ZWQiLCAiSW5qdXJpZXMgY2F1c2VkIiwgIkluanVyaWVzIHJlY2VpdmVkIiwgIlJlZmVyZWVzIGF0dGFja2VkIiwgInN0YXJyZWQgTnV0ZWxsYSBjb21tZXJjaWFscyIsICJQZW9wbGUgZGllZCBkdXJpbmcgYWZ0ZXJtYXRjaCBwYXJ0aWVzIl07CnZhciBST1dTID0gWyJFeGFtcGxldG9uIEZDIiwgIkdyYXNzaG9wcGVycyBaw7xyaWNoIiwgIkZDIENvbHVtYnVzIiwgIlJNIEFub3ZhIl07CnZhciBDT05URU5UID0gW2dlbmVyYXRlRGF0YShbIk5hbWUiLCAiRm91bHMiLCAiVHJpY2sgc2hvdHMiLCAiU3BpdCBhdCBwZW9wbGUiXSwgWyJFeGFtcGxldG9uIEZDIiwgIkx1ZG92aWdvcyBVbml0ZWQiLCAiS2lsbGVyIENsdWIiXSksCiAgZ2VuZXJhdGVEYXRhKEhFQURTLCBST1dTKSwKICBnZW5lcmF0ZURhdGEoSEVBRFMsIFJPV1MpLAogIGdlbmVyYXRlRGF0YShIRUFEUywgUk9XUyksCiAgZ2VuZXJhdGVEYXRhKEhFQURTLCBST1dTKSwKICBnZW5lcmF0ZURhdGEoSEVBRFMsIFJPV1MpLAogIGdlbmVyYXRlRGF0YShIRUFEUywgUk9XUyksCiAgZ2VuZXJhdGVEYXRhKEhFQURTLCBST1dTKSwKICBnZW5lcmF0ZURhdGEoSEVBRFMsIFJPV1MpLAogIGdlbmVyYXRlRGF0YShIRUFEUywgUk9XUyksCiAgZ2VuZXJhdGVEYXRhKEhFQURTLCBST1dTKSwKICBnZW5lcmF0ZURhdGEoSEVBRFMsIFJPV1MpLAogIGdlbmVyYXRlRGF0YShIRUFEUywgUk9XUyksCiAgZ2VuZXJhdGVEYXRhKEhFQURTLCBST1dTKSwKICBnZW5lcmF0ZURhdGEoSEVBRFMsIFJPV1MpLAogIGdlbmVyYXRlRGF0YShIRUFEUywgUk9XUyksCiAgZ2VuZXJhdGVEYXRhKEhFQURTLCBST1dTKSwKICBnZW5lcmF0ZURhdGEoSEVBRFMsIFJPV1MpXTsKCmNvbnNvbGUubG9nKENPTlRFTlQpOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJJbnRlcmFjdGl2ZUV4cGVyaW1lbnQiLAogIGNvbXBvbmVudHM6IHsKICAgIEFsdENoYXQsCiAgICBBbHRUYWJsZQogIH0sCiAgZGF0YSgpIHsKICAgIGNvbnN0IHRyaWFsID0gewogICAgICBjb25kaXRpb25zOlsiQ29udmluY2UgeW91ciBjaGF0IHBhcnRuZXIgdGhhdCBFeGFtcGxldG9uIEZDIHBsYXllZCB1bmZhaXIuIiwKICAgICAgICAiQ29udmluY2UgeW91ciBjaGF0IHBhcnRuZXIgdGhhdCBFeGFtcGxldG9uIEZDIHBsYXllZCBmYWlyLiJdLAogICAgICBjb250ZW50OiBDT05URU5UCiAgICB9OwogICAgcmV0dXJuIHsKICAgICAgdHJpYWwKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBzdWJtaXRfY2hhdCgpIHsKICAgICAgdmFyIGNvbnRhaW5lciA9IFtdOwogICAgICBmb3IodmFyIGk9MDsgaTxkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhdGJveF8xJykuY2hpbGRyZW4ubGVuZ3RoOyBpKyspewogICAgICAgIHZhciBtc2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhdGJveF8xJykuY2hpbGRyZW5baV07CiAgICAgICAgdmFyIG1zZ190ZXh0ID0gbXNnLnRleHRDb250ZW50OwogICAgICAgIGNvbnRhaW5lci5wdXNoKG1zZ190ZXh0KTsKICAgICAgfQogICAgICB0aGlzLiRtYWdwaWUuYWRkUmVzdWx0KHsgcXVlc3Rpb246ICJDaGF0IG1lc3NhZ2VzIiwgYW5zd2VyOiBjb250YWluZXJ9KTsKICAgICAgY29uc29sZS5sb2codGhpcy4kbWFncGllLnNvY2tldCk7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<script>\nimport AltChat from '../src/components/AltChat.vue';\nimport AltTable from \"@/components/AltTable\";\nexport default {\n  components: {AltTable}\n}\n\n</script>\n\n<template>\n  <!--\n  Set your experiment id here and\n  Define your data sources with the trials attribute\n  :trials=\"{\n      forced_choice,\n      multi_dropdown,\n      sentenceChoice,\n      imageSelection,\n      sliderRating\n    }\"-->\n  <Experiment\n    id=\"test1234\"\n\n  >\n    <!-- The contents of the #title template slot will be displayed in the upper left corner of the experiment -->\n    <template #title>\n      <div>Interactive experiment</div>\n    </template>\n\n    <!-- The contents of the #screens template slot define your experiment -->\n    <template #screens>\n      <Screen :title=\"'Welcome'\">\n        Welcome to our experiment.\n        <br />\n        <br />\n        We are so happy you joined.\n        <br />\n        <br />\n        Usually, nobody ever plays with us. But now you are here.\n        <br />\n        Yay! We will have so much fun together :)))\n        <button @click=\"$magpie.nextScreen();\">Begin the experiment</button>\n      </Screen>\n\n      <Screen :title=\"'General Instructions'\">\n        In this experiment, you will be able to have a real-time discussion with a chat partner.\n        Your discussion will be about the behavior of a soccer club (Exampleton FC) during the last season.\n        In the table below you can see descriptive statistics on the fairness behavior of multiple soccer clubs during\n        the last season. During your discussion with your chat partner you will be able to inspect such a table, and\n        use its information as a basis for your arguments.\n        <br />\n        <br />\n        <AltTable :content=\"trial.content[0]\"></AltTable>\n        <br />\n        Note that you can sort the table in descending or ascending order by clicking on the names in the head row.\n        <button\n            @click=\"\n            $magpie.nextScreen();\n            $magpie.addResult({ question: 'condition', answer: (parseInt($magpie.socket.variant) - 1)});\n          \"\n        >\n          to the practice trial\n        </button>\n      </Screen>\n\n      <Screen :title=\"'Pretest'\">\n        <template #0=\"{responses}\">\n          <AltTable :content=\"trial.content[parseInt($magpie.socket.chain)]\"></AltTable>\n          <p>How fair did Exampleton FC play during the last season?</p>\n          <SliderInput\n              left=\"Very Unfair\"\n              right=\"Very Fair\"\n              initial=\"50\"\n              :response.sync=\"responses.slider\"\n          />\n          <button @click=\"$magpie.addResult({question: 'pre', answer:  responses.slider}); $magpie.nextScreen();\">Continue</button>\n        </template>\n      </Screen>\n\n      <ConnectInteractive />\n\n      <Screen>\n        <AltTable :content=\"trial.content[parseInt($magpie.socket.chain)]\"></AltTable>\n        <p>{{ trial.conditions[ (parseInt($magpie.socket.variant) - 1)] }}</p>\n        <AltChat></AltChat>\n        <button @click=\"$magpie.nextScreen(); submit_chat()\">Leave Chat</button>\n      </Screen>\n\n      <Screen :title=\"'Posttest'\">\n        <template #0=\"{responses}\">\n          <AltTable :content=\"trial.content[parseInt($magpie.socket.chain)]\"></AltTable>\n          <p>How fair did Exampleton FC play during the last season?</p>\n          <SliderInput\n              left=\"Very Unfair\"\n              right=\"Very Fair\"\n              initial=\"50\"\n              :response.sync=\"responses.slider\"\n          />\n          <button @click=\"$magpie.addResult({question: 'post', answer:  responses.slider}); $magpie.nextScreen();\">Continue</button>\n        </template>\n      </Screen>\n\n      <DebugResults />\n\n      <!-- While developing your experiment, using the DebugResults screen is fine,\n      once you're going live, you can use the <SubmitResults> screen to automatically send your experimental data to the server. -->\n\n      <Screen :title=\"'Thanks!'\">\n        Goodbye\n      </Screen>\n    </template>\n  </Experiment>\n</template>\n\n\n\n<script>\n// Load data from csv files as javascript arrays with objects\nimport _ from 'lodash';\n\nimport AltChat from '../src/components/AltChat.vue';\nimport AltTable from '../src/components/AltTable.vue';\nimport Vue from \"vue\";\n\n\n// get our own random generators\n\nconst SEED = 23111995;\n\n\nfunction RandomInt(seed) {\n  this._seed = seed % 2147483647;\n  if (this._seed <= 0) this._seed += 2147483646;\n}\n\nRandomInt.prototype.next = function () {\n  this._seed = (this._seed * 16807) & 0xffffffff;\n  return (this._seed - 1) | 0;\n};\n\nRandomInt.prototype.nextFloat = function () {\n  // We know that result of next() will be 1 to 2147483646 (inclusive).\n  return Math.abs((this.next() - 1) / 2147483646);\n};\n\nvar rng = new RandomInt(SEED);\n\n// generate the data\n\nfunction generateData(head, rows, vmin, vmax) {\n  vmin = (typeof vmin !== 'undefined') ?  vmin : 0;\n  vmax = (typeof vmax !== 'undefined') ?  vmax : 20;\n  var data = [];\n  for (var i=0; i < rows.length; i ++){\n    data.push([]);\n    data[i][0] = rows[i];\n    for (var j=1; j < head.length; j ++){\n      data[i][j] = Math.floor(rng.nextFloat() * vmax) + vmin;\n    }\n  }\n  return {head:head, data:data}\n}\n\nvar HEADS = [\"Name\", \"Fouls caused\", \"Fouls received\", \"Injuries caused\", \"Injuries received\", \"Referees attacked\", \"starred Nutella commercials\", \"People died during aftermatch parties\"];\nvar ROWS = [\"Exampleton FC\", \"Grasshoppers Zürich\", \"FC Columbus\", \"RM Anova\"];\nvar CONTENT = [generateData([\"Name\", \"Fouls\", \"Trick shots\", \"Spit at people\"], [\"Exampleton FC\", \"Ludovigos United\", \"Killer Club\"]),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS),\n  generateData(HEADS, ROWS)];\n\nconsole.log(CONTENT);\n\nexport default {\n  name: \"InteractiveExperiment\",\n  components: {\n    AltChat,\n    AltTable\n  },\n  data() {\n    const trial = {\n      conditions:[\"Convince your chat partner that Exampleton FC played unfair.\",\n        \"Convince your chat partner that Exampleton FC played fair.\"],\n      content: CONTENT\n    };\n    return {\n      trial\n    };\n  },\n  methods: {\n    submit_chat() {\n      var container = [];\n      for(var i=0; i<document.getElementById('chatbox_1').children.length; i++){\n        var msg = document.getElementById('chatbox_1').children[i];\n        var msg_text = msg.textContent;\n        container.push(msg_text);\n      }\n      this.$magpie.addResult({ question: \"Chat messages\", answer: container});\n      console.log(this.$magpie.socket);\n    }\n  }\n}\n</script>\n"]}]}